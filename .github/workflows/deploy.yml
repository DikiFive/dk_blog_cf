# 定义工作流名称为 "deploy"
name: deploy

# 定义触发工作流的事件
on:
  push: # 当仓库有新的推送时触发
    branches:
      - main # 设置触发部署的分支名称
  pull_request: # 当有新的拉取请求时触发，但不会执行deploy步骤
  workflow_dispatch: # 允许通过 GitHub Actions 工作流页面手动触发
  schedule: # 定时触发工作流
    # Runs everyday at 8:00 AM（配置的计划任务，每天上午8点执行）
    - cron: "0 0 * * *"

# 定义工作流中的作业
jobs:
  # 定义作业名称为 "build"
  build:
    # 指定作业运行在 'ubuntu-latest' 版本的虚拟环境
    runs-on: ubuntu-latest
    # 定义作业需要执行的步骤
    steps:
      # 步骤一：检出仓库代码
      - name: Checkout
        uses: actions/checkout@v2 # 使用 actions/checkout@v2 动作
        with:
          fetch-depth: 0 # 获取所有历史提交

      # 步骤二：设置 Hugo 环境
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2 # 使用 peaceiris 的 actions-hugo 动作来设置 Hugo
        with:
          hugo-version: "latest" # 使用最新版本的 Hugo

      # 步骤三：构建网站
      - name: Build Web
        run: hugo # 运行 hugo 命令来生成静态网页文件

      # 步骤四：部署网站到 GitHub Pages
      - name: Deploy Web
        uses: peaceiris/actions-gh-pages@v4 # 使用 peaceiris 的 actions-gh-pages 动作来部署
        with:
          # 下面是传递给 actions-gh-pages 动作的参数
          PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} # 使用 GitHub 仓库的 secrets 中定义的 PERSONAL_TOKEN
          EXTERNAL_REPOSITORY: DikiFive/DikiFive.github.io # 指定外部仓库的名称，格式为 '用户名/仓库名'
          PUBLISH_BRANCH: main # 指定推送到的远程分支名，这里是
          PUBLISH_DIR: ./public # 指定要部署的目录，通常是 Hugo 生成的静态文件目录
          commit_message: ${{ github.event.head_commit.message }} # 定义部署提交的信息，使用触发部署的提交信息
